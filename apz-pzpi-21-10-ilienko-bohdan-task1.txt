Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук


Кафедра програмної інженерії


КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для оренди та керування дронами


		Студент гр. ПЗПІ-21-10	_________________ Ільєнко Б.А.
							(підпис)
		Керівник роботи			_________________ доц. Лещинська І.О.
							(підпис)
							      Роботу захищено «__» ______ 2024.р
							      з оцінкою _______________________
		Комісія:				_______________ доц. Лещинський В.О.
								(підпис)
							_______________ доц. Лещинська І.О.
								(підпис)
							_______________ ст. викл. Сокорчук І.П.
								(підпис)

Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет  комп’ютерних наук               Кафедра програмної інженерії                  _
Спеціальність 121 – Інженерія програмного забезпечення                                         _
Курс          3           Семестр                                          6                                                  _
Навчальна дисципліна Архітектура програмного забезпечення                                _

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

.                                                 Ільєнка Богдана Анатолійовича                                             .
1. Тема проєкту: Програмна система для оренди та керування дронами.                 .                                                                                                 
2. Термін узгодження завдання курсової роботи « 24 »     березня    . 2024 р.
3. Термін здачі студентом закінченої роботи « 28 »    червня   . 2024 р.
4. Вихідні дані до проєкту: завдання щодо розробки унікальної програмної системи з подальшою можливістю монетизації, яка має бути масштабованою, орієнтованою на масового користувача, підтримувати інтернаціоналізацію та локалізацію, із забезпеченням захисту персональних даних та відповідати сучасним стандартам щодо захисту даних. Програмна система повинна включати такі компоненти: серверна частина, клієнтська частина.                                                                                                    
5. Зміст пояснювальної записки (перелік питань, що належить розробити) вступ, специфікація програмної системи, опис архітектури програмної системи, опис серверної частини програмної системи, опис клієнтської частини програмної системи, висновки, перелік джерел посилань, додатки.                                                             
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) UML діаграма розгортання, Use-case діаграма, ER-модель даних, UML діаграма станів, UML діаграма пакетів, UML діаграма компонентів.                                                                                     .                                    


КАЛЕНДАРНИЙ ПЛАН

№
Назва етапів курсової роботи
Термін виконання
етапів роботи
Примітка
1
Функціональна специфікація
програмного проєкту
20.03.2024
Виконано
2
Проектування програмного
проєкту
28.03.2024
Виконано
3
Кодування програмного проєкту
01.06.2024
Виконано
4
Оформлення пояснювальної записки
25.06.2024
Виконано
5
Захист курсової роботи
28.06.2024
Виконано

Дата видачі завдання «	  24   »	березня	 2024 р.

		Керівник 				 	          	      доц. Лещинська І.О.
								(підпис)
		
Завдання прийняв до виконання
ст. гр. ПЗПІ-21-10					      Ільєнко Б.А.
					     (підпис)








РЕФЕРАТ


	Пояснювальна записка: 43 сторінки, 7 рисунків, 7 переліків посилання, 4 додатки, 2 таблиці.
	АДМІНІСТРАТОР, ДРОН, ОПЛАТА, ОРЕНДА, ОРЕНДАР ДРОНУ, ОРЕНДОДАВЕЦЬ ДРОНУ.
	Сучасна та актуальна на сьогоднішній час проблема щодо управління орендою безпілотних літальних апаратів є об’єктом нашої розробки. Організація процесу оренди БПЛА це – швидке створення оголошень щодо оренди, пошук оголошень про оренду, зручне оформлення оренди на дрони, пошук апаратів за визначеними характеристиками, керування дронами після узгодження оренди, перегляд інформації про апарат та стеження за його характеристиками та даними. Перелічені проблеми та процеси й стали поштовхом для створення програмної системи для оренди та керування дронами.
	Метою нашої роботи є проєктування та реалізації програмної системи для оренди та керування дронами, яка вирішує проблеми користувачів зі сторони орендаря та орендатора безпілотних літальних апаратів, а саме: створення оголошень про оренду, отримання дронів в оренду, пошук оголошень за критеріями, відстеження статусу орендованого апарату.
	Серед методів розробки по-перше було виконано проєктування системи, тобто, опис функціональності програмної системи, визначення архітектури системи та вибір інструментів для кодування [1, 2]. Й далі власне була реалізована програмна системи за допомоги обраних технологій для розробки.
	Отже, як результат виконання курсової роботи ми маємо програмну системи для оренди та керування дронами, яка складається з серверної та клієнтської частин.



ЗМІСТ


Вступ…………………………………………………………………………………….6
    1 Специфікація програмного забезпечення…...……………………..........................7
    2 Опис архітектури програмної системи………….…………………………………8
    3 Опис серверної частини програмної системи………………………………….....10
        3.1. Проєктування серверної частини………………………………………..........10
        3.2. Архітектура серверної частини……………………………………….………12
        3.3. Опис бази даних………………………………………………………………..13
        3.4. Опис Rest специфікації серверної частини…………………………………...15
        3.5. Кодування серверної частини програмної системи………………………….15
    4 Опис клієнтської частини програмної системи………………………………….16
        4.1. Архітектура клієнтської частини……………………………………………..16
        4.2. Кодування клієнтської частини програмної системи частини………………18
Висновки……………………………………………………………………………….19
Перелік джерел посилання…………………………………………………………...20
Додаток А Специфікація програмного забезпечення……………..………………..21
Додаток Б Опис специфікації Rest API……………………………...………………33
Додаток В Програмний код серверної частини……………………………………..36
Додаток Г Програмний код клієнтської частини…………………………………...42









ВСТУП


	На сьогоднішній день маємо проблеми, які пов’язані з роботою оренди безпілотних літальних апаратів. Орендарі таких апаратів хочу мати можливість надавати свої дрони для оренди задля отримання прибутку. А орендарі хочуть мати зручний інструмент для оренди літальних апаратів. Відповідно, саме дані проблеми є поштовхом для створення програмного рішення для оренди безпілотних літальних апаратів.
	Хоча наша система має вузький напрямок, але залишається актуальною, адже вона вирішує проблеми у всіх сферах діяльності людини, де використовуються дрони, в тому числі й у військовій сфері.
	Таким чином, метою курсового проєкту є створення програмної системи для оренди та керування дронами, яка складається з серверної та клієнтської частин та надає функціональність оренди дронів, відстеження статусу апаратів, пошук дронів за визначеними критеріями.














1 СПЕЦИФІКАЦІЯ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ


	Для опису програмної системи на етапі проєктування має бути розроблена специфікація програмного забезпечення. Даний документ описує загальні вимоги до системи, бізнес-вимоги, функціональні вимоги. Також специфікація містить технічні характеристики системи. Програмна системи для оренди та керування дронами була описана у форматі Vision and Scope документу, в якому й містяться усі моменти щодо вимог та реалізації програмної системи. Специфікація програмного забезпечення наведена в додатку А.




















2 ОПИС АРХІТЕКТУРИ ПРОГРАМНОЇ СИСТЕМИ


	За архітектуру в системі була обрана клієнт-серверна архітектура. Суть її полягає в розділенні обов’язків між сервером, який обробляє дані користувачів, та власне користувачем, який користується пристроєм. 
	В ролі сервера власне в нас є серверна частина, яка оброблює бізнес логіку та дані користувачів, а також база даних для зберігання даних користувачів. 
	Та в ролі клієнта в нас є веб-застосунок, який надає інтерфейс користувача для відправки запитів на сервер та відображення даних в графічному форматі. 
	Взаємодія між даними частинами відбувається таким чином, що, клієнт надсилає HTTPS-запити до сервера, який обробляє ці запити, взаємодіє з базою даних та повертає результати у вигляді HTTPS-відповідей. Це дозволяє забезпечити динамічну роботу системи, де клієнт відповідає за відображення, а сервер – за обробку даних.
	Архітектура нашої система відображена на діаграмі розгортання (див. рис. 2.1).



Рисунок 2.1 – UML діаграма розгортання

	Отже, ми описали архітектуру програмної системи та створили діаграму розгортання, яка відображає, яким чином взаємодіють архітектурні частини нашої системи.













3 ОПИС СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	3.1 Проєктування серверної частини


	Першим кроком виділимо користувачів в системі.
	В системі були виділені такі ролі користувачів: 
    • Орендар: орендує дрони та відстежує їх стан.
    • Орендатор: створює оголошення про оренду. Надає дрони в оренду.
    • Адміністратор: керує системою, схвалює оголошення про оренду від орендодаторів.
	Створимо UMl діаграми прецедентів для користувачів системи, для відображення доступної їм функціональності (див. рис. 3.1).


Рисунок 3.1 – UML діаграма прецедентів для орендаря та орендодавця

	І далі також створимо діаграму прецедентів для адміністратора (див. Рис. 3.2).


Рисунок 3.2 – UML діаграма прецедентів для адміністратора

	Далі створимо UML діаграму станів (див. рис. 3.3), щоб відобразити поведінку системі в залежності від її станів.

 
Рисунок 3.3 – UML діаграма станів

	Для створення діаграми станів були виділені такі стани:
    • Створення оголошення про оренду.
    • Оформлення оренди.
    • Особистий кабінет.
    • Керування даними про дрони.
    • Перегляд поточних дронів на оренді.


	3.2 Архітектура серверної частини


	Архітектура серверної частини має назву MSC (Model-Service-Controller). Дана архітектура є різновидом MVC архітектури та полягає у розділенні застосунку на частини:
    • Model – моделі, відповідають опис сутностей бази даних.
    • Service – сервіси, проміжне між моделлю та контролером, відповідають за бізнес логіку.
    • Controller – контроллер, відповідає за відправку даних користувачу у форматі json або html та маршрутизацію.
	3.3 Опис бази даних


	Для зберігання даних була використана реляційна модель, а саме Postgre SQL. 
	В програмній системі ми маємо такі сутності:
    • Users – користувачі системи.
    • Drones – дрони, які зареєстровано в системі.
    • Drone_logs – інформація, яка надходить від дрону в момент часу.
    • Drone_usage – поточне використання дрону.
    • Rentals – оренда дрону.
    • Drone_lease_to_company – інформація про оренду дрону компанією.
    • Drones_models – модель дрону, технічні характеристики.
    • Maintenance_records – інформація про обслуговування дрону.
    • Subscriptions – підписка користувача.
    • User_balances – грошовий баланс користувача.
    • Transactions – транзакція, яка проводиться між користувачами.
    • Support_tickets – інформація про повідомлення в службу підтримки.
	Усі ці сутності бази даних відображено на ER-моделі даних (див. рис. 3.4).


Рисунок 3.4 – ER-модель даних

	Таким чином, ми створили ER-модель даних, яка відображає сутності нашої бази даних та зв’язки між ними.





	3.4 Опис Rest специфікації серверної частини


	Взаємодія серверної та клієнтської частини реалізована за допомоги специфікації Rest API. В таблиці Б.1 наведено специфікацію Rest API.


	3.5 Кодування серверної частини програмної системи


	На серверній частині реалізовано бізнес логіку, тобто математичні методи та обчислення даних, які надходять від користувачів.
	Наприклад, при оренді дрону реалізовано систему знижок, при оренді апарату на довгий строк. При оренді на декілька днів ціна за оренду буде стандартна. Але ціна буде менше, якщо орендувати на більший строк. Програмний код фалу drone.service.ts, де реалізовано логіку оренди дрону, наведено в додатку В.
	І також в цьому файлі присутня робота із зовнішнім API для отримання актуального курсу валют для реалізації інтернаціоналізації в системі.
	Також на серверній частині реалізовано локалізація за допомоги бібліотеки «i18next». Приклад файлу errors.json для української локалізації наведено в додатку В. Тут наведено переклад помилок у системі українською мовою.
	Авторизація на серверній частині реалізована за допомоги JWT токену, а саме Access Token та Refresh Token. Програмний код файлу auth.service.ts, де реалізовано авторизацію користувача, наведено в додатку В.





4 ОПИС КЛІЄНТСЬКОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	4.1 Архітектура клієнтської частини


	Архітектура клієнтської частини має назву вертикальна слайсова архітектура. 
	В нашій структурі присутні такі директорії:
    • Components.
    • Routing.
    • Services.
    • State.
    • Types.
    • Views.
	Для відображення структури клієнтської частини побудуємо діаграму пакетів (див. рис. 4.1).


Рисунок 4.1 – UML діаграма пакетів клієнтської частини

	Далі також створимо діаграму компонентів. Виділимо на діаграмі такі компоненти:
    • Drone.
    • DroneUsage.
    • Rental.
    • DroneLogs.


Рисунок 4.2 – UML діаграма компонентів клієнтської частини
	 
	Таким чином, ми побудували діаграму компонентів, яка показує, як компоненти системи взаємодіють між собою.








	4.2 Кодування клієнтської частини програмної системи


	Клієнтська частина надає інтерфейс користувача для зручного відображення даних системи та роботи з нею.
	Наприклад, в додатку Г наведено програмний код компоненту DroneDetails.tsx для відображення інформації про дрон.
	Також, в системі присутнє адміністрування. В додатку Г наведено програмний код файлу Dashboard.tsx, який описує відображення панелі адміністратора на сторінці.
	Також на клієнтській частині реалізовано локалізацію, за допомоги бібліотеки «i18next». В додатку Г наведено програмний код файлу i18n.ts, в якому наведено налаштування локалізації у веб-застосунку.

















ВИСНОВКИ


	Як результат виконання курсового проєкту ми маємо програмну систему для оренди та керування дронами, яка складається з серверної частини та клієнтської частини. 
	Систему реалізовано за класичним шаблоном клієнт-серверної архітектури, в якій сервер відповідає за обробку та обчислення, та клієнт – за відображення даних та відправку запитів на сервер.
	Програмна система реалізована з дотриманням вимог відповідно до локалізації та інтернаціоналізації, безпеки та захисту даних. В програмній системі було реалізовано складну бізнес логіку з використанням математичних методів для обробки даних користувачів.
	В системі присутня можливість адміністрування та управління даними користувачів.
	Програмна система орієнтована на масового користувача, тому її можна застосовувати в різноманітних сферах діяльності людини.













ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАНЬ


    1. Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Design Patterns. Elements of Reusable Object-oriented Software. Addsion Wesley Longman, Print. India East. Press, 1999. – 417 с.
    2. Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.
    3. Award-winning rental software & website builder. URL: https://booqable.com/ (дата звернення: 20.04.2024).
    4. Impartial Experts in Uncrewed Technologies. URL: https://coptrz.com/ (дата звернення: 20.04.2024).
    5. Documentation | NestJS - A progressive Node.js framework. URL: https://docs.nestjs.com/ (дата звернення: 30.05.2024).
    6. React Documentation: Офіційна документація для бібліотеки React. URL: https://reactjs.org/docs/getting-started.html (дата звернення: 30.05.2024).
    7. apzkr-pzpi-21-10-ilienko-bohdan. URL: https://youtu.be/bAkP844OGqo.













ДОДАТОК А
Специфікація програмного забезпечення


1 БІЗНЕС-ВИМОГИ
	1.1 Передумови


	На сьогоднішній день безпілотні літальні апарати є дуже затребуваними засобами в різних сферах діяльності, таких як археологія, мистецтво, розваги, сфера безпеки та моніторингу, а також у військовій сфері. Тому попит на використання дронів є дуже високим. 
	Проблемою людей, які хочуть використовувати дрони, є те, що вони можуть бути достатньо дорогими, тому не всі можуть їх собі дозволити. Проблему таких людей можна вирішити за допомогою системи оренди дронів, яка буде надавати їм безпілотні літальні апарати за меншу суму та на визначений проміжок часу.
	Проблемою орендаторів, які мають БПЛА та хочуть надавати послуги оренди, є те, що вони хочуть мати зручну онлайн платформу, де вони змогли б швидко надавати послуги оренди дронів.
	Саме це стало передумовою для створення програмної системи для оренди та керування дронами.


	1.2 Бізнес-можливості
	

	На ринку є достатня кількість конкурентів у сфері надання БПЛА в оренду. Один з таким має назву booqable.com [3]. Дана програмна система надає послуги оренди в будь якій сфері. Але якщо ми проаналізуємо саме послуги оренди дронів на даному сервісі, то маємо, що він обробляє замовлення користувачів, відстежує запаси товарів, має вбудовану платіжну систему. Але основним недоліком даної системи є те, що вона ніяк не зв’язує орендаря з орендатором, тобто орендатор не можу відстежити поточний стан свого наданого товару.
	Прикладом ще одного конкурента може бути coptrz.com [4]. Даний сервіс надає новіші моделі БПЛА та сучасні технології для їх керування. Але все ще залишається проблема орендаторів. В даній програмній системі не передбачено те, що буть який власник дронів може надати свої апарати в оденду.
	Наша програмна система орієнтована на ринок послуг, а саме на ринок оренди безпілотних літальних апаратів.
	Монетизація в нашій системі відбувається власне через надання послуг оренди користувачам, а також через систему підписки користувачів на різних рівнях, для отримання додаткового функціоналу.


	1.3 Бізнес-цілі та критерії успіху


	BO-1: Залучити більше 10 000 орендаторів за перший рік.
	ВО-2: Залучити та утримати один мільйон орендарів за перший рік. 
	ВО-3: Кожний другий користувач оформлює принаймні мінімальний рівень підписки для отримання додаткового функціоналу.
	SC-1: Досягнення поставленої кількості орендаторів.
	SC-2: Протягом першого року кількість постійних користувачів сервісу тільки зростає.
	SC-3: Більше половини користувачів системи мають підписку.





	1.4 Потреби клієнтів або ринку


	Потреби орендарів.
    • Орендувати БПЛА онлайн, щоб отримати їх в найближчому зручному місці.
    • Зручне керування дронами на відстані.
    • Перегляд пройдених дронами маршрутів.
	Потреби орендаторів.
    • Швидка та зручна система надання оренди БПЛА.
    • Відстеження основних характеристик апарату в реальному часу.


	1.5 Бізнес-ризики


	Бізнес-ризики, які можуть перешкодити розвитку проєкту та способи їх уникнення:
    • Конкуренція. Так як на ринку вже існують конкурентні сервіси в нашій галузі, ми маємо надати користувачам унікальні послуги та функції, які будуть заохочувати користування саме нашим сервісом
    • Потреба в постійному оновленні продукту. Ми маємо постійно вдосконалювати наш продукт, щоб утримати користувачів і завжди пропонувати кращі умови користування, ніж у конкурентів.
    • Технічні проблеми. Користувачі можуть стикнутися  з проблемами у використанні сервісом, у тому числі й технічними. Саме це може відштовхнути клієнтів у використанні саме нашим сервісом.
    • Законодавство інших країн. Особливості законодавства інших країн може вплинути на доступність в обробці деяких даних, що відповідно вплине на користування сервісом для людей з даних країн. Тому ми маємо дотримуватися правил обробки даних для усіх країн, на які націлений наш продукт та адаптувати сервіс відповідно вимог.



























2 КОНЦЕПЦІЯ РІШЕННЯ
	2.1 Окреслення концепції
	

	Наша програмна система надає послуги оренди безпілотних літальних апаратів користувачам, з подальшою можливістю зручного керування БПЛА, відстеження в реальному часі. Орендатори мають можливість викладати свої апарати в систему для надання послуг оренди. Наш продукт доступний через мобільний додаток та веб-інтерфейс, забезпечуючи доступність та зручність користування незалежно від місця проживання користувачів.
	Основною метою створення нашого програмного продукту є вирішення основних проблем орендарів та орендаторів дронів.
	Наша система призначена для забезпечення простого та інтуїтивно зрозумілого інтерфейсу для користувачів, щоб вони могли легко знайти для себе той апарат, який їм потрібен.


	2.2 Головна функціональність


	MF-1: Реєстрація та авторизація в системі з роллю орендаря або орендатора.
	MF-2: Система підписок різних рівнів для забезпечення додаткового функціоналу.
	MF-3: Створення оголошень про оренду. 
	MF-4: Вибір підходящого апарату з потрібними характеристиками, ціною з можливістю запрати апарат в найближчому зручному місці. Визначення строків оренди. Відстеження статусу оренди.
	MF-5: Відображення місцезнаходження апарату в реальному часі. Зберігання та перегляд історії маршрутів БПЛА. Експорт історії маршрутів в зручному форматі.
	MF-6: Онлайн оплата за оренду.
	МF-7: Аутентифікація пристроїв за допомогою сертифікатів або токенів. Захист від несанкціонованого доступу до управління дроном.
	MF-8: Система адміністрування – схвалення орендаторів адміністраторами, взаємодія з орендаторами, взаємодія з орендарями щодо помилок та проблем.


	2.3 Припущення та залежності 


	Припущення:
    • Припускається, що користувачі мають доступ до Інтернету для використання основних функцій продукту.
    • Припускається, що орендатори будуть надавати достовірні дані щодо власних апаратів.
	Залежності:
    • Розробка продукту залежить від доступності та якості зовнішніх сервісів для платежів та збору даних, які можуть бути інтегровані в продукт.
    • Залежність від працездатності літальних апаратів.
    • Залежність від доступності необхідних технологічних платформ та мов програмування для розробки продукту.








3 РАМКИ ТА ОБМЕЖЕННЯ
	3.1 Рамки первинного випуску


	Далі наведено функціональність кожної складової системи, яка буде реалізована в первинному випуску програмного продукту.
Серверна частина:
    • Реєстрація та авторизація користувачів. Система повинна надавати можливість користувачам реєстрації та авторизації з використанням надійних методів аутентифікації.
    • Безпека та захист даних користувачів. Особисті дані користувачів не будуть доступні адміністраторам, паролі будуть зберігатися в хешованому вигляді, авторизація буде відбуватися через згенерований токен доступу. Також аутентифікація дронів за допомогою сертифікатів або токенів та захист від несанкціонованого доступу до управління БПЛА.
    • Розподілення користувачів за ролями. В системі користувачі мають наступні ролі: орендар, орендатор, адміністратор системи. Користувачі будуть обмежені в функціоналі своїми ролями.
    • Адміністрування системи. Адміністратору системи доступні функції адміністрування системи, а саме: функції експорту та імпорту даних, управління орендами, управління даними користувачів.
    • Система оформлення оренди на дрони. Математичні методи для підрахунку вартості оренди.
    • Система знижок при оформленні оренди на довгий строк.
    • Система створення пропозицій оренди.
    • Система підписок різного рівня. Надання додаткового функціоналу користувачу відповідно до його рівня підписки.
    • Збереження даних про місцерозташування дрону в реальному часі. Збереження історії маршрутів за весь період користування.
	Клієнтська частина:
    • Авторизація та реєстрація. Сервіс повинен надавати інтерфейс для авторизації та реєстрації користувачів.
    • Локалізація та інтернаціоналізація системи. Інтерфейс користувача має бути перекладеним на англійську та українську мови. А також підтримувати роботу з усіма часовими поясами, та валютами США та України.
    • Інтерфейс користувача для створення пропозиції оренди.
    • Інтерфейс користувача для оформлення оренди на визначений строк.
    • Графічне відображення місцезнаходження апарату на карті.
    • Графічне відображення історії маршруту БПЛА на карті у визначений момент часу.
    • Панель адміністрування. Адміністратору системи надається доступ до деяких даних користувача, управління експортом та імпортом даних. Адміністратор має схвалити нового орендатора в системі для його подальшої можливості користування сервісом в ролі орендатора.
    • Особистий кабінет користувача. Користувач може управляти своїми особистими даними, переглядати історії оренди та історії маршрутів БПЛА.


	3.2 Рамки наступних випусків


	У подальших випусках програмного продукту будуть реалізовані функції:
    • Оплата через сервіс.
    • Більше функцій щодо підписки на сервіс, персональні тарифи для постійних користувачів.



	3.3 Обмеження та винятки


	Обмеження, які впливають на роботу нашої системи:
    • Інтернет-з'єднання: наша система потребує доступу до Інтернету для взаємодії з користувачами. Відсутність стабільного Інтернет-з'єднання може призвести до обмеження функціональності або зниження продуктивності.
    • Технічні обмеження: деякі функції системи можуть бути обмежені технічними характеристиками пристроїв користувачів. Наприклад, мобільний застосунок може мати обмежену продуктивність порівняно з веб-версією системи.
    • Безпека: забезпечення конфіденційності та безпеки даних користувачів є пріоритетним завданням. Будь-які обмеження, пов'язані з безпекою, повинні бути дотримані, щоб запобігти можливим загрозам.
Винятки:
    • Інші мережі: винятком є випадки, коли користувачі мають обмежений доступ до Інтернету через обмеженість власного інтернет-з'єднання. У таких випадках наша система може надавати обмежену функціональність офлайн або в обмеженому режимі.
    • Старі пристрої: користувачі зі старими пристроями або обмеженими технічними характеристиками можуть використовувати систему, але з меншою продуктивністю. Наша система повинна забезпечувати підтримку для різних пристроїв і браузерів.
    • Незначні помилки: у випадку незначних помилок або порушень безпеки, система повинна мати механізми виявлення та виправлення проблем для запобігання подальшим порушенням безпеки та збереження даних користувачів.




4 БІЗНЕС-КОНТЕКСТ
	4.1 Профілі зацікавлених сторін 


	У таблиці А.1 описані зацікавлені сторони проєкту.

	Таблиця А.1 – Профілі зацікавлених сторін
Зацікавлена сторона
Обмеження
Основні інтереси
Ставлення
Основна цінність
Орендарі
Обмеження накладаються відповідному рівню підписки, який має користувач
Швидке та зручне оформлення оренди БПЛА
Вимоги до зручності, безпека та конфіденційність даних
Особистий час, гроші, безпека
Орендатори
Обмеження накладаються відповідному рівню підписки, який має користувач
Швидке та зручне надання літальних апаратів в оренду 
Отримання прибутку від оренди
Особистий час, гроші, безпека







	4.2 Пріоритети проєкту


	Наведені далі пріоритети вимог включать головну функціональність.
    • Реєстрація та авторизація користувачів користувачів. Система ролей
    • Адміністрування програмної системи.
    • Система надання БПЛА в оренду.
    • Оформлення оренди.
    • Відстеження характеристик апарату в реальному часі.
    •  Особистий кабінет користувача.
Пріоритети бюджету: основний бюджет проєкту планується на хостинг та подальшу підтримку сервісу.
	До часу випуску програмного продукту планується реалізувати 100 відсотків запланованих функцій, відповідно пункту 2.2 Головна функціональність.
	

	4.3 Робоче середовище


	Для реалізації проєкту будуть застосовані наступні технології:
    • Архітектура: програмна система буде побудована за шаблоном клієнт-серверної архітектури.
    • Для серверної частини будуть використані такі фреймворки та бібліотеки: Node.js, а саме Nest.js [5] – для створення серверу, JWT - аутентифікація за допомогою JSON Web Token, TypeORM – ORM для взаємодії з PostgreSQL.
    • Для зберігання даних була обрана PostgreSQL, як основна реляційна база даних.
    • Для клієнтської частини будуть використані такі фреймворки та бібліотеки: React [6] – основний фреймворк для створення інтерфейсу користувача, i18next – бібліотека для локалізації інтерфейсу.



























ДОДАТОК Б 
Опис специфікації Rest API


	Таблиця Б.1 – Опис специфікації Rest API
Контролер
Метод
URL
Опис
Логи дрону
GET

/drone-logs
Отримати усі логи


/drone-logs/:id
Отримати лог за id


/drone-logs/drone/:droneId
Отримати усі логи дрону за id

DELETE
/drone-logs/:id
Видалити за id

POST
/drone-logs
Створити лог
Дрон
GET
/drone
Отримати усі дрони


/drone/available
Отримати усі доступні дрони

POST
/drone
Створити дрон

PATCH
/drone/:id
Змінити дрон

DELETE
/drone/:id
Видалити дрон
Використання дрону
GET
/drone-usage
Отримати усю інформацію про використання дронів


/drone-usage/:id
Отримати використання дрону за id

POST
/drone-usage
Створити запис про використання дрону

PATCH
/drone-usage/:id
Змінити запис про використання дрону

DELETE
/drone-usage/:id
Видалити запис
Модель дрону
GET
/drone-models
Отримати усі моделі
	Продовження таблиці Б.1
Модель дрону
GET
/drone-models/id
Отримати модель за id

POST
/drone-models
Створити модель

PATCH
/drone-models/:id
Редагувати модель

DELETE
/drone-models/:id
Видалити модель
Авторизація
POST
/sign-up
Авторизація користувача
Вихід з облікового запису
POST
/log-out
Вихід користувача з облікового запису
Оновити токен
POST
/refresh
Оновити токен користувача
Користувач
GET
/users
Отримати усіх користувачів


/users/profile
Отримати профіль користувача


/usesrs/:id
Отримати користувача за id

POST
/users
Зареєструвати користувача

PATCH
/users/:id
Змінити користувача

DELETE
/users/:id
Видалити користувача
Оренда
GET
/leasing
Отримати усі оренди


/leasing/:id
Отримати оренду за id

POST
/leasing
Створити оренду

PATCH
/leasing/:id
Редагувати інформацію про оренду

DELETE
/leasing/:id
Видалити оренду
Оплата
GET
/billings/transactions
Отримати усі транзакції


/billings/transactions/:id
Отримати транзакцію за id


	Продовження таблиці Б.1
Оплата
GET
/billings/balances/:id
Отримати баланс користувача

POST
/billings/transactions
Створити транзакцію


/billings/balances
Створити баланс

PATCH
/billings/transactions/:id
Редагувати транзакцію


/billings/balances/:id
Редагувати баланс

DELETE
/billings/transactions/:id
Видалити транзакцію


/billings/balances/:id
Видалити запис про баланс
Служба підтримки
GET
/support
Отримати усі повідомлення


/support/:id


POST
/support
Створити нове повідомлення

PATCH
/support/:id
Редагувати повідомлення

DELETE
/support/:id
Видалити повідомлення














ДОДАТОК В
Програмний код серверної частини


	Далі наведено програмний код файлу drone.service.ts, де реалізовано логіку оренди дрону:

1 import {
2   ForbiddenException,
3   Injectable,
4   NotFoundException,
5 } from '@nestjs/common';
6 import { InjectRepository } from '@nestjs/typeorm';
7 import { Repository } from 'typeorm';
8 import { Drone } from '../entities/drone.entity';
9 import { CreateDroneDto } from './dto/create-drone.dto';
10 import { UpdateDroneDto } from './dto/update-drone.dto';
11 import { DroneLeaseToCompany } from 'src/leasing/entities/leasing.entity';
12 import { DroneOwnerType, DroneStatus, DroneUsagePlan } from 'core';
13 import axios from 'axios';
14 
15 interface DroneUpdate {
16   ownerId?: string;
17   droneId: string;
18   updateDroneDto: UpdateDroneDto;
19 }
20 
21 @Injectable()
22 export class DroneService {
23   constructor(
24     @InjectRepository(Drone)
25     private droneRepository: Repository<Drone>,
26     @InjectRepository(DroneLeaseToCompany)
27     private droneLeaseToCompanyRepository: Repository<DroneLeaseToCompany>,
28   ) {}
29 
30   async create(createDroneDto: CreateDroneDto) {
31     const drone = this.droneRepository.create({
32       ...createDroneDto,
33       owner: DroneOwnerType.THIRD_PARTY,
34     });
35 
36     return await this.droneRepository.save(drone);
37   }
38 
39   async findAll() {
40     return await this.droneRepository.find({
41       relations: ['droneModel'],
42       where: {
43         status: DroneStatus.AVAILABLE,
44       },
45     });
46   }
47 
48   calculatePrice(
49     plan: DroneUsagePlan,
50     duration: number,
51     durationType: 'day' | 'week' | 'month',
52   ): number {
53     const basePricePerDay = 10;
54 
55     const planCoefficients = {
56       [DroneUsagePlan.BASIC]: 1,
57       [DroneUsagePlan.BUSINESS]: 1.25,
58       [DroneUsagePlan.PREMIUM]: 1.45,
59     };
60 
61     const discountRates = {
62       day: 1,
63       week: 0.9,
64       month: 0.75,
65     };
66 
67     const coefficient = planCoefficients[plan];
68     const discountRate = discountRates[durationType];
69 
70     let totalPrice = basePricePerDay * duration * coefficient * discountRate;
71 
72     // Дополнительная скидка за более долгий срок
73     if (durationType === 'week') {
74       totalPrice *= 0.9; // дополнительная скидка 10%
75     } else if (durationType === 'month') {
76       totalPrice *= 0.75; // дополнительная скидка 25%
77     }
78 
79     return totalPrice;
80   }
81 
82   async convertCurrency(
83     // amount: number,
84     base: string,
85     target: string,
86   ): Promise<number> {
87     const options = {
88       method: 'GET',
89       url: 'https://exchange-rate-api1.p.rapidapi.com/convert',
90       params: { base, target },
91       headers: {
92         'X-RapidAPI-Key': '9fc976c5bemshf7e9dacfab36645p14ef8ajsn49294716680d',
93         'X-RapidAPI-Host': 'exchange-rate-api1.p.rapidapi.com',
94       },
95     };
96 
97     try {
98       const response = await axios.request(options);
99       return response.data.convert_result.rate;
100    } catch (error) {
101      console.error(error);
102      throw new Error('Currency conversion failed');
103    }
104  }
105 
106  async findAvailable(currency: string = 'USD') {
107    const drones = await this.droneRepository.find({
108      relations: ['droneModel'],
109      where: {
110        status: DroneStatus.AVAILABLE,
111      },
112    });
113 
114    return Promise.all(
115      drones.map(async (drone) => {
116        const dailyPrice = this.calculatePrice(drone.plan, 1, 'day');
117        const weeklyPrice = this.calculatePrice(drone.plan, 7, 'week');
118        const monthlyPrice = this.calculatePrice(drone.plan, 30, 'month');
119 
120        const rate = await this.convertCurrency('USD', currency);
121 
122        const convertedDailyPrice = Math.round(dailyPrice * rate * 100) / 100;
123        const convertedWeeklyPrice = Math.round(weeklyPrice * rate * 100) / 100;
124        const convertedMonthlyPrice =
125          Math.round(monthlyPrice * rate * 100) / 100;
126 
127        return {
128          ...drone,
129          prices: {
130            daily: convertedDailyPrice,
131            weekly: convertedWeeklyPrice,
132            monthly: convertedMonthlyPrice,
133          },
134        };
135      }),
136    );
137  }
138 
139  async update(droneUpdate: DroneUpdate) {
140    const { ownerId, droneId, updateDroneDto } = droneUpdate;
141    const drone = await this.droneRepository.findOne({
142      where: {
143        id: droneId,
144      },
145      relations: ['leases', 'leases.user'],
146    });
147 
148    if (!drone) {
149      throw new NotFoundException('Drone not found');
150    }
151 
152    if (ownerId) {
153      const droneLeases = drone.leases;
154      const droneLeaseThatBelongsToUser = droneLeases.find(
155        (lease) => lease.landlord.id === ownerId,
156      );
157 
158      if (!droneLeaseThatBelongsToUser) {
159        throw new ForbiddenException('Drone does not belong to the user');
160      }
161 
162      droneLeaseThatBelongsToUser.landlord.id = ownerId;
163 
164      await this.droneLeaseToCompanyRepository.save(
165        droneLeaseThatBelongsToUser,
166      );
167    }
168 
169    Object.assign(drone, updateDroneDto);
170 
171    return await this.droneRepository.save(drone);
172  }
173 
174  async remove(id: string, force = false) {
175    const drone = await this.droneRepository.findOne({
176      where: {
177        id,
178      },
179    });
180 
181    if (!drone) {
182      throw new NotFoundException('Drone not found');
183    }
184 
185    if (force) {
186      return await this.droneRepository.remove(drone);
187    }
188 
189    drone.status = DroneStatus.REMOVED;
190 
191    return await this.droneRepository.save(drone);
192  }
193 }

	Далі наведено програмний код errors.json для української локалізації:

1 {
2   "USER_BALANCE_NOT_FOUND": "Баланс користувача не знайдено",
3   "TRANSACTION_NOT_FOUND": "Транзакція з ID {{id}} не знайдена",
4 
5   "INVALID_PASSWORD": "Неправильний пароль",
6   "INVALID_REFRESH_TOKEN": "Неправильний токен оновлення"
7 }

	Далі наведено програмний код файлу auth.service.ts, де реалізовано авторизацію користувача:

1 import {
2   ForbiddenException,
3   Inject,
4   Injectable,
5   UnauthorizedException,
6   forwardRef,
7 } from '@nestjs/common';
8 import { JwtService } from '@nestjs/jwt';
9 import { Tokens, StrategyTypes, JwtPayload } from 'core';
10 import { SignUpDto } from './dto/sign-up.dto';
11 import { hash, verify } from 'argon2';
12 import { SignInDto } from './dto/sign-in.dto';
13 import { UsersService } from 'src/users/users.service';
14 import { I18nService } from 'nestjs-i18n';
15 
16 @Injectable()
17 export class AuthService {
18   constructor(
19     private jwtService: JwtService,
20     @Inject(forwardRef(() => UsersService)) private usersService: UsersService,
21     private readonly i18n: I18nService,
22   ) {}
23 
24   async signUp(signUpDto: SignUpDto, picture): Promise<Tokens> {
25     const { id, roles } = await this.usersService.create(signUpDto);
26 
27     const { accessToken, refreshToken } = await this.generateTokens({
28       id,
29       roles,
30     });
31 
32     return { accessToken, refreshToken };
33   }
34 
35   async signIn(signInDto: SignInDto): Promise<Tokens> {
36     const { id, roles, password } = await this.usersService.findOneByParams({
37       email: signInDto.email,
38     });
39 
40     const isPasswordValid = await verify(password, signInDto.password);
41 
42     if (!isPasswordValid) {
43       throw new UnauthorizedException(this.i18n.t('errors.INVALID_PASSWORD'));
44     }
45 
46     const { accessToken, refreshToken } = await this.generateTokens({
47       id,
48       roles,
49     });
50 
51     return { accessToken, refreshToken };
52   }
53 
54   logOut(userId: string): void {
55     this.usersService.updateRefreshToken(userId, null);
56   }
57 
58   async refreshTokens(userId: string, token: string): Promise<Tokens> {
59     const { token: hashedRefreshToken, roles } =
60       await this.usersService.findOneByParams({ id: userId });
61 
62     if (!hashedRefreshToken) {
63       throw new ForbiddenException(this.i18n.t('errors.INVALID_REFRESH_TOKEN'));
64     }
65     const isRefreshTokenValid = await verify(hashedRefreshToken, token);
66 
67     if (!isRefreshTokenValid) {
68       throw new ForbiddenException(this.i18n.t('errors.INVALID_REFRESH_TOKEN'));
69     }
70     const { accessToken, refreshToken } = await this.generateTokens({
71       id: userId,
72       roles,
73     });
74 
75     return { accessToken, refreshToken };
76   }
77 
78   //#region reusable methods
79   async generateTokens(payload: JwtPayload): Promise<Tokens> {
80     const [accessToken, refreshToken] = await Promise.all([
81       this.signToken(payload, '1d'), //TODO: refactor to ENV
82       this.signToken(payload, '7d'),
83     ]);
84     const hashedRefreshToken = await hash(refreshToken);
85     await this.usersService.updateRefreshToken(payload.id, hashedRefreshToken);
86 
87     return { accessToken, refreshToken };
88   }
89 
90   private async signToken(payload: JwtPayload, expiresIn: string) {
91     return this.jwtService.signAsync(payload, {
92       secret: process.env.JWT_KEY || 'some_jwt_secret',
93       expiresIn,
94     });
95   }
96 
97   //#endregion
98 }






















ДОДАТОК Г
Програмний код клієнтської частини


	Далі наведено програмний код компоненту DroneDetails.tsx для відображення інформації про дрон:

1 import React from "react";
2 
3 interface DroneDetailsProps {
4   drone: {
5     name: string;
6     manufacturer: string;
7     weight?: number;
8     max_speed?: number;
9     max_flight_time?: number;
10     max_range?: number;
11     price?: number;
12     description?: string;
13   };
14   closeModal: () => void;
15 }
16 
17 const DroneDetails: React.FC<DroneDetailsProps> = ({ drone, closeModal }) => {
18   return (
19     <div className="p-4">
20       <button
21         onClick={closeModal}
22         className="bg-red-500 text-white px-4 py-2 rounded absolute top-0 right-0"
23       >
24         Close
25       </button>
26       <h2 className="text-2xl font-bold mb-4">{drone.name}</h2>
27       <p>
28         <strong>Manufacturer:</strong> {drone.manufacturer}
29       </p>
30       {drone.weight && (
31         <p>
32           <strong>Weight:</strong> {drone.weight} g
33         </p>
34       )}
35       {drone.max_speed && (
36         <p>
37           <strong>Max Speed:</strong> {drone.max_speed} km/h
38         </p>
39       )}
40       {drone.max_flight_time && (
41         <p>
42           <strong>Max Flight Time:</strong> {drone.max_flight_time} min
43         </p>
44       )}
45       {drone.max_range && (
46         <p>
47           <strong>Max Range:</strong> {drone.max_range} km
48         </p>
49       )}
50       {drone.price && (
51         <p>
52           <strong>Price:</strong> ${drone.price}
53         </p>
54       )}
55       {drone.description && (
56         <p>
57           <strong>Description:</strong> {drone.description}
58         </p>
59       )}
60     </div>
61   );
62 };
63 
64 export default DroneDetails;

	Далі наведено програмний код файлу Dashboard.tsx, який описує відображення панелі адміністратора на сторінці:

1 import React from "react";
2 import { Outlet } from "react-router-dom";
3 import DashboardItem from "../components/DashboardItem";
4 
5 const Dashboard: React.FC = () => {
6   return (
7     <div className="flex min-h-screen">
8       <nav className="w-1/4 p-6 bg-gray-800 text-white">
9         <ul className="space-y-4">
10           <DashboardItem to="/dashboard/users">Users</DashboardItem>
11           <DashboardItem to="/dashboard/drone-models">
12             Drone Models
13           </DashboardItem>
14           <DashboardItem to="/dashboard/drones">Drones</DashboardItem>
15           <DashboardItem to="/dashboard/job-openings">
16             Job Openings
17           </DashboardItem>
18           <DashboardItem to="/dashboard/drone-usage">Drone Usage</DashboardItem>
19         </ul>
20       </nav>
21       <main className="w-3/4 p-6 bg-gray-100">
22         <Outlet />
23       </main>
24     </div>
25   );
26 };
27 
28 export default Dashboard;
